
params {
    gadi_account = System.getenv("PROJECT")
    whoami = 'whoami'.execute().text.trim()
    storage_account = ''
    singularityCacheDir = '' 
    bed_file = "$baseDir/iuis.bed"
    results_dir  = "$baseDir/results" 
    outdir = "$baseDir/trace"
    vep_cache = "/g/data/tn36/ukb_processing/data/vep/GRCh_38_cache" 
    annovar_db = "/g/data/tn36/ukb_processing/annovar/annovar_db"
    phenotype_csv = "/g/data/tn36/ukb_processing/data/phenotype_csv_list.txt"
    merge_phenotype_script = "/g/data/tn36/ukb_processing/data/scripts/optimised_process.py"
    transform_vep_anno_script = '/g/data/tn36/ukb_processing/data/scripts/transform_csq_vcf.py'
    format_csv_script = '/g/data/tn36/ukb_processing/data/scripts/process_csv.py'

    containers = [
        bcftools:"/g/data/tn36/ukb_processing/containers/bcftools_latest.sif",
        ensembl_vep:"/g/data/tn36/ukb_processing/containers/ensembl-vep_latest.sif",
        annovar:"/g/data/tn36/ukb_processing/containers/annovar_latest.sif",
        bgzip:"/g/data/tn36/ukb_processing/containers/bgzip.sif",
        pandas:"/g/data/tn36/ukb_processing/containers/pandas_2.0.3_ps.sif"
    ]  
}

singularity {
    enabled = true
    autoMounts = true
    autoCleanUp = true
    cacheDir = params.singularityCacheDir ? params.singularityCacheDir
        : "/scratch/${params.gadi_account}/${params.whoami}/.nextflow/singularity"
    libraryDir = params.singularityCacheDir ? params.singularityCacheDir
        : "/scratch/${params.gadi_account}/${params.whoami}/.nextflow/singularity"
    temp = "/scratch/${params.gadi_account}/${params.whoami}/.nextflow/singularity/temp"
}

process {
    module = 'singularity'
    cache = 'lenient'
    executor = 'pbspro'
    scratch = true
    project = "${params.gadi_account}"
    // Explicitly define the storage paths
    // storage = 'gdata/np30+scratch/np30+gdata/tn36+scratch/tn36'
    errorStrategy = { task.attempt < 15 ? 'retry' : 'terminate' }
    memory = '2GB'                 
    maxForks = 30  
    storage = ''
    storage = 'scratch/${params.gadi_account}+gdata/${params.gadi_account}'
    ext.storageAccountString = {
        accountString -> accountString.tokenize(',')
            .collect {
                acct ->"scratch/${acct}+gdata/${acct}"
            }.join('+')
    }
    if (params.storage_account) {
    storage = "scratch/${params.gadi_account}+gdata/${params.gadi_account}+${ext.storageAccountString(params.storage_account)}"
    }
    else {
    storage = "scratch/${params.gadi_account}+gdata/${params.gadi_account}"
    }

}

executor {
    name = 'pbspro'
    queueSize = 90 
    //submitRateLimit = '5/5sec' 
}

// Output process execution trace file
def trace_timestamp = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')
trace {
    enabled = true
    overwrite = false
    file = "${params.outdir}/runInfo/trace-${trace_timestamp}.tsv"
    fields = 'task_id,hash,native_id,name,status,exit,submit,duration,realtime,cpus,%cpu,memory,%mem,rss,peak_rss,peak_vmem,rchar,wchar,workdir'
}